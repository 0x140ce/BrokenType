/////////////////////////////////////////////////////////////////////////
//
// Author: Mateusz Jurczyk (mjurczyk@google.com)
//
// Copyright 2018 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "sfnt_mutator.h"

#include <cstring>

#include "common.h"
#include "mutator.h"
#include "sfnt_font.h"

void InitSfntMutationStrategies(SfntStrategies *strategies) {
  MutationStrategy strat;

#define ADD_MUTATION_STRATEGY(tag, mutation_type, mutation_ratio) {\
    strat.type = mutation_type;\
    strat.min_mutation_ratio = 0.0;\
    strat.max_mutation_ratio = 2.0 * mutation_ratio;\
    (*strategies)[tag].push_back(strat);\
  }

  ADD_MUTATION_STRATEGY('hmtx', MUTATION_BITFLIPPING,     0.1);
  ADD_MUTATION_STRATEGY('hmtx', MUTATION_BYTEFLIPPING,    0.8);
  ADD_MUTATION_STRATEGY('hmtx', MUTATION_CHUNKSPEW,       0.8);
  ADD_MUTATION_STRATEGY('hmtx', MUTATION_SPECIAL_INTS,    0.8);
  ADD_MUTATION_STRATEGY('hmtx', MUTATION_ADD_SUB_BINARY,  0.8);

  ADD_MUTATION_STRATEGY('maxp', MUTATION_BITFLIPPING,     0.009766);
  ADD_MUTATION_STRATEGY('maxp', MUTATION_BYTEFLIPPING,    0.078125);
  ADD_MUTATION_STRATEGY('maxp', MUTATION_CHUNKSPEW,       0.125);
  ADD_MUTATION_STRATEGY('maxp', MUTATION_SPECIAL_INTS,    0.056641);
  ADD_MUTATION_STRATEGY('maxp', MUTATION_ADD_SUB_BINARY,  0.0625);

  ADD_MUTATION_STRATEGY('OS/2', MUTATION_BITFLIPPING,     0.1);
  ADD_MUTATION_STRATEGY('OS/2', MUTATION_BYTEFLIPPING,    0.2);
  ADD_MUTATION_STRATEGY('OS/2', MUTATION_CHUNKSPEW,       0.4);
  ADD_MUTATION_STRATEGY('OS/2', MUTATION_SPECIAL_INTS,    0.2);
  ADD_MUTATION_STRATEGY('OS/2', MUTATION_ADD_SUB_BINARY,  0.4);

  ADD_MUTATION_STRATEGY('post', MUTATION_BITFLIPPING,     0.004);
  ADD_MUTATION_STRATEGY('post', MUTATION_BYTEFLIPPING,    0.06);
  ADD_MUTATION_STRATEGY('post', MUTATION_CHUNKSPEW,       0.2);
  ADD_MUTATION_STRATEGY('post', MUTATION_SPECIAL_INTS,    0.15);
  ADD_MUTATION_STRATEGY('post', MUTATION_ADD_SUB_BINARY,  0.03);

  ADD_MUTATION_STRATEGY('cvt ', MUTATION_BITFLIPPING,     0.1);
  ADD_MUTATION_STRATEGY('cvt ', MUTATION_BYTEFLIPPING,    0.1);
  ADD_MUTATION_STRATEGY('cvt ', MUTATION_CHUNKSPEW,       0.1);
  ADD_MUTATION_STRATEGY('cvt ', MUTATION_SPECIAL_INTS,    0.1);
  ADD_MUTATION_STRATEGY('cvt ', MUTATION_ADD_SUB_BINARY,  0.1);

  ADD_MUTATION_STRATEGY('fpgm', MUTATION_BITFLIPPING,     0.1);
  ADD_MUTATION_STRATEGY('fpgm', MUTATION_BYTEFLIPPING,    0.1);
  ADD_MUTATION_STRATEGY('fpgm', MUTATION_CHUNKSPEW,       0.1);
  ADD_MUTATION_STRATEGY('fpgm', MUTATION_SPECIAL_INTS,    0.1);
  ADD_MUTATION_STRATEGY('fpgm', MUTATION_ADD_SUB_BINARY,  0.1);

  ADD_MUTATION_STRATEGY('glyf', MUTATION_BITFLIPPING,     0.00008);
  ADD_MUTATION_STRATEGY('glyf', MUTATION_BYTEFLIPPING,    0.00064);
  ADD_MUTATION_STRATEGY('glyf', MUTATION_CHUNKSPEW,       0.008);
  ADD_MUTATION_STRATEGY('glyf', MUTATION_SPECIAL_INTS,    0.00064);
  ADD_MUTATION_STRATEGY('glyf', MUTATION_ADD_SUB_BINARY,  0.00064);

  ADD_MUTATION_STRATEGY('prep', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('prep', MUTATION_BYTEFLIPPING,    0.01);
  ADD_MUTATION_STRATEGY('prep', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('prep', MUTATION_SPECIAL_INTS,    0.01);
  ADD_MUTATION_STRATEGY('prep', MUTATION_ADD_SUB_BINARY,  0.01);

  ADD_MUTATION_STRATEGY('gasp', MUTATION_BITFLIPPING,     0.1);
  ADD_MUTATION_STRATEGY('gasp', MUTATION_BYTEFLIPPING,    0.1);
  ADD_MUTATION_STRATEGY('gasp', MUTATION_CHUNKSPEW,       0.1);
  ADD_MUTATION_STRATEGY('gasp', MUTATION_SPECIAL_INTS,    0.1);
  ADD_MUTATION_STRATEGY('gasp', MUTATION_ADD_SUB_BINARY,  0.1);

  ADD_MUTATION_STRATEGY('CFF ', MUTATION_BITFLIPPING,     0.00005);
  ADD_MUTATION_STRATEGY('CFF ', MUTATION_BYTEFLIPPING,    0.0001);
  ADD_MUTATION_STRATEGY('CFF ', MUTATION_CHUNKSPEW,       0.001);
  ADD_MUTATION_STRATEGY('CFF ', MUTATION_SPECIAL_INTS,    0.0002);
  ADD_MUTATION_STRATEGY('CFF ', MUTATION_ADD_SUB_BINARY,  0.0001);

  ADD_MUTATION_STRATEGY('EBDT', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('EBDT', MUTATION_BYTEFLIPPING,    0.08);
  ADD_MUTATION_STRATEGY('EBDT', MUTATION_CHUNKSPEW,       0.2);
  ADD_MUTATION_STRATEGY('EBDT', MUTATION_SPECIAL_INTS,    0.08);
  ADD_MUTATION_STRATEGY('EBDT', MUTATION_ADD_SUB_BINARY,  0.08);

  ADD_MUTATION_STRATEGY('EBLC', MUTATION_BITFLIPPING,     0.001);
  ADD_MUTATION_STRATEGY('EBLC', MUTATION_BYTEFLIPPING,    0.001);
  ADD_MUTATION_STRATEGY('EBLC', MUTATION_CHUNKSPEW,       0.001);
  ADD_MUTATION_STRATEGY('EBLC', MUTATION_SPECIAL_INTS,    0.001);
  ADD_MUTATION_STRATEGY('EBLC', MUTATION_ADD_SUB_BINARY,  0.001);

  ADD_MUTATION_STRATEGY('EBSC', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('EBSC', MUTATION_BYTEFLIPPING,    0.01);
  ADD_MUTATION_STRATEGY('EBSC', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('EBSC', MUTATION_SPECIAL_INTS,    0.01);
  ADD_MUTATION_STRATEGY('EBSC', MUTATION_ADD_SUB_BINARY,  0.01);

  ADD_MUTATION_STRATEGY('BASE', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('BASE', MUTATION_BYTEFLIPPING,    0.01);
  ADD_MUTATION_STRATEGY('BASE', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('BASE', MUTATION_SPECIAL_INTS,    0.01);
  ADD_MUTATION_STRATEGY('BASE', MUTATION_ADD_SUB_BINARY,  0.01);

  ADD_MUTATION_STRATEGY('GDEF', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('GDEF', MUTATION_BYTEFLIPPING,    0.01);
  ADD_MUTATION_STRATEGY('GDEF', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('GDEF', MUTATION_SPECIAL_INTS,    0.01);
  ADD_MUTATION_STRATEGY('GDEF', MUTATION_ADD_SUB_BINARY,  0.01);

  ADD_MUTATION_STRATEGY('GPOS', MUTATION_BITFLIPPING,     0.001);
  ADD_MUTATION_STRATEGY('GPOS', MUTATION_BYTEFLIPPING,    0.008);
  ADD_MUTATION_STRATEGY('GPOS', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('GPOS', MUTATION_SPECIAL_INTS,    0.008);
  ADD_MUTATION_STRATEGY('GPOS', MUTATION_ADD_SUB_BINARY,  0.008);

  ADD_MUTATION_STRATEGY('GSUB', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('GSUB', MUTATION_BYTEFLIPPING,    0.08);
  ADD_MUTATION_STRATEGY('GSUB', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('GSUB', MUTATION_SPECIAL_INTS,    0.08);
  ADD_MUTATION_STRATEGY('GSUB', MUTATION_ADD_SUB_BINARY,  0.08);

  ADD_MUTATION_STRATEGY('JSTF', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('JSTF', MUTATION_BYTEFLIPPING,    0.01);
  ADD_MUTATION_STRATEGY('JSTF', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('JSTF', MUTATION_SPECIAL_INTS,    0.01);
  ADD_MUTATION_STRATEGY('JSTF', MUTATION_ADD_SUB_BINARY,  0.01);

  ADD_MUTATION_STRATEGY('hdmx', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('hdmx', MUTATION_BYTEFLIPPING,    0.01);
  ADD_MUTATION_STRATEGY('hdmx', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('hdmx', MUTATION_SPECIAL_INTS,    0.01);
  ADD_MUTATION_STRATEGY('hdmx', MUTATION_ADD_SUB_BINARY,  0.01);

  ADD_MUTATION_STRATEGY('kern', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('kern', MUTATION_BYTEFLIPPING,    0.01);
  ADD_MUTATION_STRATEGY('kern', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('kern', MUTATION_SPECIAL_INTS,    0.01);
  ADD_MUTATION_STRATEGY('kern', MUTATION_ADD_SUB_BINARY,  0.01);

  ADD_MUTATION_STRATEGY('LTSH', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('LTSH', MUTATION_BYTEFLIPPING,    0.01);
  ADD_MUTATION_STRATEGY('LTSH', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('LTSH', MUTATION_SPECIAL_INTS,    0.01);
  ADD_MUTATION_STRATEGY('LTSH', MUTATION_ADD_SUB_BINARY,  0.01);

  ADD_MUTATION_STRATEGY('VDMX', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('VDMX', MUTATION_BYTEFLIPPING,    0.01);
  ADD_MUTATION_STRATEGY('VDMX', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('VDMX', MUTATION_SPECIAL_INTS,    0.01);
  ADD_MUTATION_STRATEGY('VDMX', MUTATION_ADD_SUB_BINARY,  0.01);

  ADD_MUTATION_STRATEGY('vhea', MUTATION_BITFLIPPING,     0.1);
  ADD_MUTATION_STRATEGY('vhea', MUTATION_BYTEFLIPPING,    0.1);
  ADD_MUTATION_STRATEGY('vhea', MUTATION_CHUNKSPEW,       0.1);
  ADD_MUTATION_STRATEGY('vhea', MUTATION_SPECIAL_INTS,    0.1);
  ADD_MUTATION_STRATEGY('vhea', MUTATION_ADD_SUB_BINARY,  0.1);

  ADD_MUTATION_STRATEGY('vmtx', MUTATION_BITFLIPPING,     0.1);
  ADD_MUTATION_STRATEGY('vmtx', MUTATION_BYTEFLIPPING,    0.1);
  ADD_MUTATION_STRATEGY('vmtx', MUTATION_CHUNKSPEW,       0.1);
  ADD_MUTATION_STRATEGY('vmtx', MUTATION_SPECIAL_INTS,    0.1);
  ADD_MUTATION_STRATEGY('vmtx', MUTATION_ADD_SUB_BINARY,  0.1);

  ADD_MUTATION_STRATEGY('mort', MUTATION_BITFLIPPING,     0.01);
  ADD_MUTATION_STRATEGY('mort', MUTATION_BYTEFLIPPING,    0.01);
  ADD_MUTATION_STRATEGY('mort', MUTATION_CHUNKSPEW,       0.01);
  ADD_MUTATION_STRATEGY('mort', MUTATION_SPECIAL_INTS,    0.01);
  ADD_MUTATION_STRATEGY('mort', MUTATION_ADD_SUB_BINARY,  0.01);
}

void MutateSfntFile(SfntStrategies *strategies, SfntFont *font) {
  for (unsigned int i = 0; i < font->sfnt_tables_.size(); i++) {
    uint32_t tag = SWAP32(font->sfnt_tables_[i].tag);

    char tag_name[5]; 
    memcpy(&tag_name[0], &tag, sizeof(uint32_t));
    tag_name[4] = '\0';

    if (strategies->find(font->sfnt_tables_[i].tag) != strategies->end()) {
      printf("[+] Mutating table \"%s\" of size %d\n", tag_name, (int)font->sfnt_tables_[i].data.size());

      unsigned int changed_bytes;
      Mutator::MutateString((*strategies)[font->sfnt_tables_[i].tag],
                            &font->sfnt_tables_[i].data, &changed_bytes);
    } else {
      printf("[+] Ignoring table \"%s\"\n", tag_name);
    }
  }
}
